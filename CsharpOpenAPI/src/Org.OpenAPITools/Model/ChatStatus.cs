// <auto-generated>
/*
 * KnowLang API
 *
 * A FastAPI server for the KnowLang project, providing endpoints for all KnowLang features.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Enum for tracking chat progress status
    /// </summary>
    /// <value>Enum for tracking chat progress status</value>
    public enum ChatStatus
    {
        /// <summary>
        /// Enum Starting for value: starting
        /// </summary>
        Starting = 1,

        /// <summary>
        /// Enum Polishing for value: polishing
        /// </summary>
        Polishing = 2,

        /// <summary>
        /// Enum Retrieving for value: retrieving
        /// </summary>
        Retrieving = 3,

        /// <summary>
        /// Enum Answering for value: answering
        /// </summary>
        Answering = 4,

        /// <summary>
        /// Enum Complete for value: complete
        /// </summary>
        Complete = 5,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error = 6
    }

    /// <summary>
    /// Converts <see cref="ChatStatus"/> to and from the JSON value
    /// </summary>
    public static class ChatStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ChatStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChatStatus FromString(string value)
        {
            if (value.Equals("starting"))
                return ChatStatus.Starting;

            if (value.Equals("polishing"))
                return ChatStatus.Polishing;

            if (value.Equals("retrieving"))
                return ChatStatus.Retrieving;

            if (value.Equals("answering"))
                return ChatStatus.Answering;

            if (value.Equals("complete"))
                return ChatStatus.Complete;

            if (value.Equals("error"))
                return ChatStatus.Error;

            throw new NotImplementedException($"Could not convert value to type ChatStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ChatStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChatStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("starting"))
                return ChatStatus.Starting;

            if (value.Equals("polishing"))
                return ChatStatus.Polishing;

            if (value.Equals("retrieving"))
                return ChatStatus.Retrieving;

            if (value.Equals("answering"))
                return ChatStatus.Answering;

            if (value.Equals("complete"))
                return ChatStatus.Complete;

            if (value.Equals("error"))
                return ChatStatus.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChatStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ChatStatus value)
        {
            if (value == ChatStatus.Starting)
                return "starting";

            if (value == ChatStatus.Polishing)
                return "polishing";

            if (value == ChatStatus.Retrieving)
                return "retrieving";

            if (value == ChatStatus.Answering)
                return "answering";

            if (value == ChatStatus.Complete)
                return "complete";

            if (value == ChatStatus.Error)
                return "error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ChatStatusJsonConverter : JsonConverter<ChatStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChatStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            ChatStatus? result = rawValue == null
                ? null
                : ChatStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ChatStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChatStatus chatStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(chatStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatStatus"/>
    /// </summary>
    public class ChatStatusNullableJsonConverter : JsonConverter<ChatStatus?>
    {
        /// <summary>
        /// Returns a ChatStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChatStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            ChatStatus? result = rawValue == null
                ? null
                : ChatStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChatStatus? chatStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(chatStatus?.ToString() ?? "null");
        }
    }
}
