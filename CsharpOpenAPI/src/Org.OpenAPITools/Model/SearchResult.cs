// <auto-generated>
/*
 * KnowLang API
 *
 * A FastAPI server for the KnowLang project, providing endpoints for all KnowLang features.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Standardized search result across vector stores
    /// </summary>
    public partial class SearchResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResult" /> class.
        /// </summary>
        /// <param name="document">document</param>
        /// <param name="metadata">metadata</param>
        /// <param name="score">score</param>
        [JsonConstructor]
        public SearchResult(string document, Dictionary<string, Object> metadata, decimal score)
        {
            Document = document;
            Metadata = metadata;
            Score = score;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [JsonPropertyName("document")]
        public string Document { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [JsonPropertyName("score")]
        public decimal Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResult {\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchResult" />
    /// </summary>
    public class SearchResultJsonConverter : JsonConverter<SearchResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> document = default;
            Option<Dictionary<string, Object>?> metadata = default;
            Option<decimal?> score = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "document":
                            document = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "metadata":
                            metadata = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "score":
                            score = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!document.IsSet)
                throw new ArgumentException("Property is required for class SearchResult.", nameof(document));

            if (!metadata.IsSet)
                throw new ArgumentException("Property is required for class SearchResult.", nameof(metadata));

            if (!score.IsSet)
                throw new ArgumentException("Property is required for class SearchResult.", nameof(score));

            if (document.IsSet && document.Value == null)
                throw new ArgumentNullException(nameof(document), "Property is not nullable for class SearchResult.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class SearchResult.");

            if (score.IsSet && score.Value == null)
                throw new ArgumentNullException(nameof(score), "Property is not nullable for class SearchResult.");

            return new SearchResult(document.Value!, metadata.Value!, score.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchResult searchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchResult searchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchResult.Document == null)
                throw new ArgumentNullException(nameof(searchResult.Document), "Property is required for class SearchResult.");

            if (searchResult.Metadata == null)
                throw new ArgumentNullException(nameof(searchResult.Metadata), "Property is required for class SearchResult.");

            writer.WriteString("document", searchResult.Document);

            writer.WritePropertyName("metadata");
            JsonSerializer.Serialize(writer, searchResult.Metadata, jsonSerializerOptions);
            writer.WriteNumber("score", searchResult.Score);
        }
    }
}
