// <auto-generated>
/*
 * KnowLang API
 *
 * A FastAPI server for the KnowLang project, providing endpoints for all KnowLang features.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Extended chat result with streaming information
    /// </summary>
    public partial class StreamingChatResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamingChatResult" /> class.
        /// </summary>
        /// <param name="answer">answer</param>
        /// <param name="status">status</param>
        /// <param name="progressMessage">progressMessage</param>
        /// <param name="retrievedContext">retrievedContext</param>
        [JsonConstructor]
        public StreamingChatResult(string answer, ChatStatus status, string progressMessage, Option<List<SearchResult>?> retrievedContext = default)
        {
            Answer = answer;
            Status = status;
            ProgressMessage = progressMessage;
            RetrievedContextOption = retrievedContext;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ChatStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Answer
        /// </summary>
        [JsonPropertyName("answer")]
        public string Answer { get; set; }

        /// <summary>
        /// Gets or Sets ProgressMessage
        /// </summary>
        [JsonPropertyName("progress_message")]
        public string ProgressMessage { get; set; }

        /// <summary>
        /// Used to track the state of RetrievedContext
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SearchResult>?> RetrievedContextOption { get; private set; }

        /// <summary>
        /// Gets or Sets RetrievedContext
        /// </summary>
        [JsonPropertyName("retrieved_context")]
        public List<SearchResult>? RetrievedContext { get { return this.RetrievedContextOption; } set { this.RetrievedContextOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamingChatResult {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProgressMessage: ").Append(ProgressMessage).Append("\n");
            sb.Append("  RetrievedContext: ").Append(RetrievedContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StreamingChatResult" />
    /// </summary>
    public class StreamingChatResultJsonConverter : JsonConverter<StreamingChatResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="StreamingChatResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StreamingChatResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> answer = default;
            Option<ChatStatus?> status = default;
            Option<string?> progressMessage = default;
            Option<List<SearchResult>?> retrievedContext = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "answer":
                            answer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ChatStatus?>(ChatStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "progress_message":
                            progressMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "retrieved_context":
                            retrievedContext = new Option<List<SearchResult>?>(JsonSerializer.Deserialize<List<SearchResult>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!answer.IsSet)
                throw new ArgumentException("Property is required for class StreamingChatResult.", nameof(answer));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class StreamingChatResult.", nameof(status));

            if (!progressMessage.IsSet)
                throw new ArgumentException("Property is required for class StreamingChatResult.", nameof(progressMessage));

            if (answer.IsSet && answer.Value == null)
                throw new ArgumentNullException(nameof(answer), "Property is not nullable for class StreamingChatResult.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class StreamingChatResult.");

            if (progressMessage.IsSet && progressMessage.Value == null)
                throw new ArgumentNullException(nameof(progressMessage), "Property is not nullable for class StreamingChatResult.");

            return new StreamingChatResult(answer.Value!, status.Value!.Value!, progressMessage.Value!, retrievedContext);
        }

        /// <summary>
        /// Serializes a <see cref="StreamingChatResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="streamingChatResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StreamingChatResult streamingChatResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, streamingChatResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StreamingChatResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="streamingChatResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StreamingChatResult streamingChatResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (streamingChatResult.Answer == null)
                throw new ArgumentNullException(nameof(streamingChatResult.Answer), "Property is required for class StreamingChatResult.");

            if (streamingChatResult.ProgressMessage == null)
                throw new ArgumentNullException(nameof(streamingChatResult.ProgressMessage), "Property is required for class StreamingChatResult.");

            writer.WriteString("answer", streamingChatResult.Answer);

            var statusRawValue = ChatStatusValueConverter.ToJsonValue(streamingChatResult.Status);
            writer.WriteString("status", statusRawValue);

            writer.WriteString("progress_message", streamingChatResult.ProgressMessage);

            if (streamingChatResult.RetrievedContextOption.IsSet)
                if (streamingChatResult.RetrievedContextOption.Value != null)
                {
                    writer.WritePropertyName("retrieved_context");
                    JsonSerializer.Serialize(writer, streamingChatResult.RetrievedContext, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("retrieved_context");
        }
    }
}
