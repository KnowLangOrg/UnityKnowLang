// <auto-generated>
/*
 * KnowLang API
 *
 * A FastAPI server for the KnowLang project, providing endpoints for all KnowLang features.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ParseCommandArgs
    /// </summary>
    public partial class ParseCommandArgs : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseCommandArgs" /> class.
        /// </summary>
        /// <param name="path">path</param>
        /// <param name="output">output (default to OutputEnum.Table)</param>
        /// <param name="command">command (default to CommandEnum.Parse)</param>
        /// <param name="extraFields">extraFields</param>
        /// <param name="verbose">verbose (default to false)</param>
        /// <param name="config">config</param>
        [JsonConstructor]
        public ParseCommandArgs(string path, Option<OutputEnum?> output = default, Option<CommandEnum?> command = default, Option<Dictionary<string, Object>?> extraFields = default, Option<bool?> verbose = default, Option<string?> config = default)
        {
            Path = path;
            OutputOption = output;
            CommandOption = command;
            ExtraFieldsOption = extraFields;
            VerboseOption = verbose;
            ConfigOption = config;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Output
        /// </summary>
        public enum OutputEnum
        {
            /// <summary>
            /// Enum Table for value: table
            /// </summary>
            Table = 1,

            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            Json = 2
        }

        /// <summary>
        /// Returns a <see cref="OutputEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OutputEnum OutputEnumFromString(string value)
        {
            if (value.Equals("table"))
                return OutputEnum.Table;

            if (value.Equals("json"))
                return OutputEnum.Json;

            throw new NotImplementedException($"Could not convert value to type OutputEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OutputEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OutputEnum? OutputEnumFromStringOrDefault(string value)
        {
            if (value.Equals("table"))
                return OutputEnum.Table;

            if (value.Equals("json"))
                return OutputEnum.Json;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OutputEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OutputEnumToJsonValue(OutputEnum? value)
        {
            if (value == OutputEnum.Table)
                return "table";

            if (value == OutputEnum.Json)
                return "json";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Output
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OutputEnum?> OutputOption { get; private set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [JsonPropertyName("output")]
        public OutputEnum? Output { get { return this.OutputOption; } set { this.OutputOption = new(value); } }

        /// <summary>
        /// Defines Command
        /// </summary>
        public enum CommandEnum
        {
            /// <summary>
            /// Enum Parse for value: parse
            /// </summary>
            Parse = 1
        }

        /// <summary>
        /// Returns a <see cref="CommandEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CommandEnum CommandEnumFromString(string value)
        {
            if (value.Equals("parse"))
                return CommandEnum.Parse;

            throw new NotImplementedException($"Could not convert value to type CommandEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CommandEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CommandEnum? CommandEnumFromStringOrDefault(string value)
        {
            if (value.Equals("parse"))
                return CommandEnum.Parse;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CommandEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CommandEnumToJsonValue(CommandEnum? value)
        {
            if (value == CommandEnum.Parse)
                return "parse";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Command
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CommandEnum?> CommandOption { get; private set; }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [JsonPropertyName("command")]
        public CommandEnum? Command { get { return this.CommandOption; } set { this.CommandOption = new(value); } }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string Path { get; set; }

        /// <summary>
        /// Used to track the state of ExtraFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> ExtraFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraFields
        /// </summary>
        [JsonPropertyName("extra_fields")]
        public Dictionary<string, Object>? ExtraFields { get { return this.ExtraFieldsOption; } set { this.ExtraFieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verbose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerboseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verbose
        /// </summary>
        [JsonPropertyName("verbose")]
        public bool? Verbose { get { return this.VerboseOption; } set { this.VerboseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [JsonPropertyName("config")]
        public string? Config { get { return this.ConfigOption; } set { this.ConfigOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParseCommandArgs {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  ExtraFields: ").Append(ExtraFields).Append("\n");
            sb.Append("  Verbose: ").Append(Verbose).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ParseCommandArgs" />
    /// </summary>
    public class ParseCommandArgsJsonConverter : JsonConverter<ParseCommandArgs>
    {
        /// <summary>
        /// Deserializes json to <see cref="ParseCommandArgs" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ParseCommandArgs Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> path = default;
            Option<ParseCommandArgs.OutputEnum?> output = default;
            Option<ParseCommandArgs.CommandEnum?> command = default;
            Option<Dictionary<string, Object>?> extraFields = default;
            Option<bool?> verbose = default;
            Option<string?> config = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "output":
                            string? outputRawValue = utf8JsonReader.GetString();
                            if (outputRawValue != null)
                                output = new Option<ParseCommandArgs.OutputEnum?>(ParseCommandArgs.OutputEnumFromStringOrDefault(outputRawValue));
                            break;
                        case "command":
                            string? commandRawValue = utf8JsonReader.GetString();
                            if (commandRawValue != null)
                                command = new Option<ParseCommandArgs.CommandEnum?>(ParseCommandArgs.CommandEnumFromStringOrDefault(commandRawValue));
                            break;
                        case "extra_fields":
                            extraFields = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "verbose":
                            verbose = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "config":
                            config = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!path.IsSet)
                throw new ArgumentException("Property is required for class ParseCommandArgs.", nameof(path));

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class ParseCommandArgs.");

            if (output.IsSet && output.Value == null)
                throw new ArgumentNullException(nameof(output), "Property is not nullable for class ParseCommandArgs.");

            if (command.IsSet && command.Value == null)
                throw new ArgumentNullException(nameof(command), "Property is not nullable for class ParseCommandArgs.");

            if (verbose.IsSet && verbose.Value == null)
                throw new ArgumentNullException(nameof(verbose), "Property is not nullable for class ParseCommandArgs.");

            return new ParseCommandArgs(path.Value!, output, command, extraFields, verbose, config);
        }

        /// <summary>
        /// Serializes a <see cref="ParseCommandArgs" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parseCommandArgs"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ParseCommandArgs parseCommandArgs, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, parseCommandArgs, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ParseCommandArgs" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parseCommandArgs"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ParseCommandArgs parseCommandArgs, JsonSerializerOptions jsonSerializerOptions)
        {
            if (parseCommandArgs.Path == null)
                throw new ArgumentNullException(nameof(parseCommandArgs.Path), "Property is required for class ParseCommandArgs.");

            writer.WriteString("path", parseCommandArgs.Path);

            var outputRawValue = ParseCommandArgs.OutputEnumToJsonValue(parseCommandArgs.OutputOption.Value!.Value);
            writer.WriteString("output", outputRawValue);
            var commandRawValue = ParseCommandArgs.CommandEnumToJsonValue(parseCommandArgs.CommandOption.Value!.Value);
            writer.WriteString("command", commandRawValue);
            if (parseCommandArgs.ExtraFieldsOption.IsSet)
                if (parseCommandArgs.ExtraFieldsOption.Value != null)
                {
                    writer.WritePropertyName("extra_fields");
                    JsonSerializer.Serialize(writer, parseCommandArgs.ExtraFields, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra_fields");
            if (parseCommandArgs.VerboseOption.IsSet)
                writer.WriteBoolean("verbose", parseCommandArgs.VerboseOption.Value!.Value);

            if (parseCommandArgs.ConfigOption.IsSet)
                if (parseCommandArgs.ConfigOption.Value != null)
                    writer.WriteString("config", parseCommandArgs.Config);
                else
                    writer.WriteNull("config");
        }
    }
}
